<< OOP의 이해/ Report 제출 >>
1. OOP(Object Oriented Programming)
 - 객체를 기준으로 나누어 구현(Java는 부분 단위가 Class)
  - 간단하게 말하면 객체 지향 프로그래밍 언어는 하나의 기능을 객체로 만들고, 이러한 객체들을 결합해서 하나의 프로그램을 만드는 것이다.
 - 예를 들고 설명하자면 핸드폰을 만드는 설계도는 Class인 것이고, 핸드폰 안에 들어가는 부품들이 Object인 것 이다.

2. Object(객체)
 - 우리가 인식할 수 있는 사물과 같은 것
 - 객체의 상태(state)의 행동(behavior)을 구체화하는 형태의 프로그래밍이 OOP이다.

3. Class
 - 객체를 정의하는 틀 or 설계도
 - 이곳에는 여러 객체를 생성하여 사용한다.
 - 클래스는 객체의 상태를 나타내는 필드와 객체의 행동을 나타내는 메소드로 구성된다.
	- 메소드는 어떤 작업을 수행하기 위한 명령문의 집합

4. abstraction(추상화)
 - 공통의 속성, 기능을 묶어서 이름을 붙이는 것
 - 추상화는 추상클래스, 인터페이스를 통해 구현한다.
	- 추상클래스 : 추상메소드를 하나 이상 포함한 추상 클래스
	- 인터페이스 : 추상메소드만을 포함한 추상클래스, 다중 상속 가능
 - 추상화는 객체들의 공통된 특징을 파악하여 정의해 놓은 설계 기법이다.
 - Java 8부터는 인터페이스 안에 default 선언을 하면 body가 있는 메소드도 선언이 가능하다.

5. Generalization(일반화)/Inheritance(상속)
 - 부모 클래스의 변수와 메소드를 자식 클래스가 전부 물려받는 것(상위 클래스의 모든 멤버를 하위 클래스가 물려받는 것)
 - 재사용성과 코드의 간결성 향상(코드의 중복성을 없애기 위함)
 - 중복이 많다면 유지보수에서도 많은 비용이 발생한다.
	- 자식 클래스 설계시 멤버를 미리 부모 클래스에 작성하면, 자식 클래스에서는 해당 멤버를 작성하지 않아도 됨
	- 이를 토대로 클래스간의 계층적 관계를 구성하고 다형성의 문법적 토대를 마련함

6. Specialization(구체적)/전문화
 - 상위 클래스 유형을 하위 클래스 유형으로 변환하는 것을 말한다.
 - 일반적인 형식에서 특정 형식으로 바뀌는 것으로 범위가 좁혀지는데 이를 다운캐스팅이라고 한다.
 - 자바컴파일러가 구체적 캐스팅을 요청하는데 이것이 명시적 캐스팅이라고 한다.

7. Realization(실체화)
 - 추상화형태의 객체를 상속하여 자신이 사용하고자하는 구현방법에 따라 오버라이딩 하여 내용을 완성하는 것
 - 인터페이스의 추상메소드를 오버라이딩해서 완성시킴
 
8. Association(연관)
 - 객체 또는 클래스가 다른 객체 또는 클래스와 의미의 관계를 가질 수 있다.
	 - 집합연관(Aggregation)
		- 전체/부분 관계를 모델링 하는 경우 한 클래스는 더큰 것을 대표하고, 그것은 더 작은것들로 이루어져 있다.
	 - 복합연관(Compositon)
		- 단순한 집합연관은 전적으로 개념적이며 전체와 부분을 구분하는 것 이상의 어떤 것도 수행하지 않는다.

9. Dependency(의존성)
 - A클래스 기능을 수행하기 위해 B클래스의 객체를 필요할 때, A클래스는 B클래스의 의존성을 가진다. 이것이 의존성 주입이다.
 - 의존성 주입은 내부에서 인스턴스를 생성하는 것이 아닌, 외부에서 주입하는 것이다.
	- 의존성을 외부에서 주입받으면 이런 장점을 가진다.
	- 코드의 재활용성이 높아짐
	- 단위테스트가 용이해짐
	- 객체 간의 의존성을 줄여줌
	- 객체 간의 결합도를 낮춰줌

10. Polymorphism(다형성)
 - Poly(다양한) + morphism(변형)의 합성어
 - 하나의 객체가 여러가지 타입을 가질 수 있는 것
 - 자바에서는 한 레퍼런스 변수가 다른 형태의 객체를 참조 가능 한 것을 말한다.
 - 오버로딩, 오버라이딩, 업캐스팅, 다운캐스팅등의 방법이 있다.
	- 오버라이딩 : 부모클래스에서 상속받은 자식 클래스에서 부모클래스에서 만들어진 메소드를 자식클래스에서 다시 재정의해서 사용하는 것
	- 오버로딩 : 같은 이름의 메소드를 사용하지만 메소드마다 다른용도로 사용해 그 결과를 다르게 구현하는 것
	- 오버로딩이 가능하려면 메소드끼리 이름은 같지만 매개변수갯수나 데이터타입이 달라야 한다.

11. Encapuslation /절차은익/ 정보은익(캡슐화)
 - 객체의 변수 및 메소드를 외부객체가 함부로 건드리지 못하도록 감싸는 개념
 - 때문에 클래스를 우리가 만들 때 이 클래스에서 만들어진 객체가 특정 목적을 잘 수행할 수 있도록 사용할 변수와 그 변수를 가지고 메소드를 관련성이 있도록 구성해야 한다.
 - 캡슐화 하는 목적은 정보은닉이 주를 이루는데, 유저정보가 public으로 선언되어 있다면, 아무나 접근이 가능해 유저정보를 변경 할 수있다. 그렇게 private로 데이터를 접근을 제한해야한다.
 이렇게 보호된 변수는 getter나 setter 등의 메소드를 통해서만 간접적으로 접근이 가능해진다.
 - 캡슐화와 정보은닉을 묶어서 말하는 경우도 있지만, 정보은닉은 캡슐화에서 파생된 보조 개념이고 캡슐화 !=정보은닉이다.
