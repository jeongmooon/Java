# 컴파일타임에러(Compile-time Error)
- 컴파일시 발생하는 에러
- 컴파일러는 구문 오류로 프로그램을 컴파일 할 수 없다.
- 대체로 문법상 에러
- **에러가 발생한 부분을 알려준다**
- 컴파일 에러의 대표 예)
	- ;가 누락된 문법 에러(Systax 오류)
	- 괄호가 안 맞는 등 구문 에러
	- classpath에 누락 ㅚㄴ 클래스(컴파일시)

# 런타임에러(Run-time Error)
- 실행 시 발생하는 에러
- 프로그램이 컴파일 된 후 실행하면서 에러 발생
- 대체로 개발 시 설게 미숙(논리적)으로 발생하는 에러
- **에러 발생 시 프로그래머가 역추적해서 원인 확인 해야함**
- 런타임 에러의 대표 예)
	- NullPointerException
	- 무한루프
	- 0으로 나누기

# public static void main(String[] args)의 의미
## public
- 제한자 부분으로 모든 함수의 앞에는 이 함수를 어디에서 접근할 수 있는지 범위를 지정
- 제한자로 public, private, protected 종류를 지정할수 있지만, main 함수만은 public을 지정해야함
	- public
	- 이유로는 main함수는 모든 실행 프로그램의 기본이 되어야함
	- 때문에 어디에서든 접근이 가능해야함

	- private
	- 이것은 해당 클래스에서만 접근이 가능함

	- protected
	- 같은 패키지 내에서만 접근이 가능함

## static
- 변수나 함수를 메모리에 할당하는 방법은 2가지가 있는데, 첫번째는 static영역에 선언, 다른거는 heap영역에 선언(new연산자)
- main 메소드는 프로그램의 기본이 되는 함수이여서 Gc에 의해 정리가 안되도록 static으로 선언하여 메모리에 항상 있도록 설정
	- static
	- 프로그램실행되는 순간 메모리 할당
	- GC에게 정리 대상이 아님

	- heap
	- 연산이 실행되는 순간
	- Gc에 의해 정리 대상

## void
- void는 함수가 끝날 때 리턴값이 없다는 뜻
- main 함수는 왜 void여야 하는가
	- main은 함수가 종료되면(비정상적 종료) 프로그램이 종료된다
	- 프로그램이 종료가 되기때문에, return값의 의미를 지닐수가 없다

- 일반 함수들은 리턴값을 변수에 담아 다음단계를 진행할 수 있기 때문에, 다른 int, char타입이 사용이 가능하다

## main
- 자바의 시작은 main 함수명으로 시작해야 한다.
- 문법이다.

## String[] args
- args 문자열을 배열로 사용한다는 의미다
- args는 변수명이여서 args가 아니여도 되지만 String[] args구문은 뺄 수 없다.
- 이유는 일반함수는 
자료형DataType
- 기본자료형(8개)
- 참조자료형(그외전부)
캐스팅
- 명시적 형변환(익스플릭시)
- 묵시적 형변환
    - 정수를 계산을하면 int로 바뀐다
    - 작은데이터타입과 큰데이터타입 연산은 큰데이터타입으로 간다
    ```
    byte b1 =10;
    byte b2 =10;

    int i = b1 + b2;
    ```
삼항연산자

HLL(하이레벨렝기지)
LLL(로우레벨렝기지)